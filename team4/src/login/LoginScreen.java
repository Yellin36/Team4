package login;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : 개인정보관리시스템
//  @ File Name : LoginScreen.java
//  @ Date : 2021-12-16
//  @ Author : 
//
//

import java.awt.*;
import java.awt.Window;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;

import team4.*;

/***********************************************************
 * LoginScreen : 로그인 화면
/***********************************************************/
public class LoginScreen extends JFrame {
    private String id;					// 입력된 아이디
    private String password;			// 입력된 비밀번호
    private boolean autochk = false;	// 자동 로그인 체크
    private LoginCtrl loginCtrlObj;		// 로그인컨트롤객체
    
    private JPanel loginPanel = new JPanel(new GridLayout(3, 2));	// 로그인 컨테이너
    private JPanel contentPane;										// 기본 창
    
    private JLabel idLabel = new JLabel("ID ");				// 아이디 라벨
    private JLabel pwdLabel = new JLabel("PWD ");			// 베밀번호 라벨
    private JTextField idText = new JTextField();			// 아이디 입력 텍스트
    private JPasswordField pwdText = new JPasswordField();	// 비밀번호 입력 텍스트
    private JCheckBox chkBtn = new JCheckBox("자동로그인");		// 자동로그인 체크박스
    private JButton loginBtn = new JButton("로그인");			// 로그인 버튼
    private JButton joinBtn = new JButton("회원가입");			// 회원가입 버튼
    private JButton backBtn = new JButton("<");				// 뒤로가기 버튼
    
    /***********************************************************
     * 생성자 : 로그인화면을 보여줌
    /***********************************************************/
    public LoginScreen() {
    	super("로그인");
    	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    	
    	setFrame();
    	setListener();
    	
    	setLocation(100,100);
    	setSize(500, 500);
    	setVisible(true);
    }
    /***********************************************************
     * setFrame() : 메인화면의 구성
    /***********************************************************/
    private void setFrame() {
    	// 기본 창 생성&설정
    	setLocationRelativeTo(null);
    	contentPane = new JPanel();
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		// 로그인 컨테이너에 컴포넌트 추가
		loginPanel.add(idLabel);
    	loginPanel.add(idText);
    	loginPanel.add(pwdLabel);
    	loginPanel.add(pwdText);
    	loginPanel.add(chkBtn);
    	loginPanel.add(joinBtn);
    	
    	// 뒤로가기 버튼, 로그인 컨테이너, 로그인 버튼 위치 설정
    	backBtn.setBounds(10, 10, 40, 40);
		loginPanel.setBounds(40, 150, 400, 70);
		loginBtn.setBounds(150,300, 200, 50 );
		
		// 기본 창에 컴포넌트 추가
		contentPane.add(loginPanel);
		contentPane.add(backBtn);
		contentPane.add(loginBtn);
    }
    /***********************************************************
     * setListener() : 화면에 띄운 버튼에 이벤트가 발생하였을 시 동작할 함수 모음
    /***********************************************************/
    private void setListener() {	
    	// 로그인버튼에 이벤트가 발생하였을시 실행되는 함수
    	loginBtn.addActionListener(new ActionListener() {
    		public void actionPerformed(ActionEvent e) {
    			// 입력된 아이디, 비밀번호 문자열의 빈공백을 제거
    			id = idText.getText().trim();
    			password = pwdText.getText().trim();
    			
    			// 입력된 아이디와 비밀번호의 빈 공간 체크
    			if(checkId(id) && checkPassword(password)) {
    				// 아이디와 비밀번호 둘 다 입력되었다면 로그인 시도
    				Login(autochk, id, password);
    			}
    		}
    	});
    	// 회원가입버튼에 이벤트가 발생하였을시 실행되는 함수: 구현x
    	joinBtn.addActionListener(new ActionListener() {
    		public void actionPerformed(ActionEvent e) {
    			//new 회원가입Screen();
    			setVisible(false);
    		}
    	});
    	// 뒤로가기버튼에 이벤트가 발생하였을시 실행되는 함수
    	backBtn.addActionListener(new ActionListener() {
    		public void actionPerformed(ActionEvent e) {
    			new MainScreen(false, null);
    			setVisible(false);
    		}
    	});
    }
    /***********************************************************
     * checkId() : 아이디의 입력 검사
     * @param String id 	입력된 아이디 문자열
     * @return 				아이디 입력 검사(입력: true, 입력x: false)
    /***********************************************************/
    private boolean checkId(String id) {
    	if(id.length() == 0) {
    		JOptionPane.showMessageDialog(null, "아이디를 입력해주세요.");
    		return false;
    	}
    	return true;
    }
    /***********************************************************
     * checkPassword() : 비밀번호의 입력 검사
     * @param String pwd	입력된 비밀번호 문자열
     * @return 				비밀번호 입력 검사(입력: true, 입력x: false)
    /***********************************************************/
    private boolean checkPassword(String pwd) {
    	if(pwd.length() == 0) {
    		JOptionPane.showMessageDialog(null, "비밀번호를 입력해주세요.");
    		return false;
    	}
    	return true;
    }
    /***********************************************************
     * Login() : 로그인 실행
     * @param boolean autochk 	자동로그인 체크
     * @param String id 		입력된 아이디 문자열
     * @param String pwd 		입력된 비밀번호 문자열
    /***********************************************************/
    private void Login(boolean autochk, String id, String pwd) {
    	String name;							// 사용자 이름
    	loginCtrlObj = new LoginCtrl(id, pwd);	// 입력한 id, pwd에 대한 로그인컨트롤 객체
    	
    	// 로그인컨트롤 객체-아이디,비밀번호 확인 return String(=name, 사용자 이름)
    	if((name = loginCtrlObj.checkIdPassword(autochk)) != null) {	// 로그인 성공
    		JOptionPane.showMessageDialog(null, name + " 님, 로그인되었습니다.");
    		new MainScreen(true, id);										// 화면 전환
    		setVisible(false);
    	}
    	else return;
    }
}
